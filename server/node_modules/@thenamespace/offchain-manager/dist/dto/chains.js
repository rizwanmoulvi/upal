"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCoinType = exports.chainMetadata = exports.ChainName = void 0;
/**
 * Supported blockchain networks for address records.
 * Each chain has a corresponding coin type used internally for ENS address records.
 *
 * @example
 * ```typescript
 * import { ChainName } from '@thenamespace/offchain-manager';
 *
 * // Use in address records
 * const addressRecord = {
 *   chain: ChainName.Ethereum,
 *   value: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
 * };
 * ```
 */
var ChainName;
(function (ChainName) {
    /** Ethereum mainnet */
    ChainName["Ethereum"] = "eth";
    /** Solana */
    ChainName["Solana"] = "sol";
    /** Arbitrum One */
    ChainName["Arbitrum"] = "arb";
    /** Optimism */
    ChainName["Optimism"] = "op";
    /** Base */
    ChainName["Base"] = "base";
    /** Polygon (formerly Matic) */
    ChainName["Polygon"] = "polygon";
    /** BNB Smart Chain (formerly BSC) */
    ChainName["Bsc"] = "bsc";
    /** Avalanche C-Chain */
    ChainName["Avalanche"] = "avax";
    /** Gnosis Chain (formerly xDai) */
    ChainName["Gnosis"] = "gnosis";
    /** zkSync Era */
    ChainName["Zksync"] = "zksync";
    /** Cosmos Hub */
    ChainName["Cosmos"] = "cosmos";
    /** NEAR Protocol */
    ChainName["Near"] = "near";
    /** Linea */
    ChainName["Linea"] = "linea";
    /** Scroll */
    ChainName["Scroll"] = "scroll";
    /** Bitcoin */
    ChainName["Bitcoin"] = "btc";
    /** Starknet */
    ChainName["Starknet"] = "starknet";
    /** Sui Network */
    ChainName["Sui"] = "sui";
    /** Unichain */
    ChainName["Unichain"] = "unichain";
    /** Berachain */
    ChainName["Berachain"] = "berachain";
    /** WorldChain */
    ChainName["WorldChain"] = "world_chain";
    /** Zora */
    ChainName["Zora"] = "zora";
    /** Celo */
    ChainName["Celo"] = "celo";
    /** Aptos */
    ChainName["Aptos"] = "aptos";
    /** Algorand */
    ChainName["Algorand"] = "algorand";
})(ChainName || (exports.ChainName = ChainName = {}));
exports.chainMetadata = {
    eth: {
        label: "Ethereum",
        coin: 60,
    },
    base: {
        label: "Base",
        coin: 8453,
    },
    op: {
        label: "Optimism",
        coin: 10,
    },
    arb: {
        label: "Arbitrum",
        coin: 42161,
    },
    bsc: {
        label: "BNB",
        coin: 56,
    },
    polygon: {
        label: "Polygon",
        coin: 137,
    },
    avax: {
        label: "Avax",
        coin: 43114,
    },
    gnosis: {
        label: "Gnosis",
        coin: 100,
    },
    zksync: {
        label: "ZkSync",
        coin: 324,
    },
    starknet: {
        label: "Starknet",
        coin: 9004,
    },
    sol: {
        label: "Solana",
        coin: 501,
    },
    btc: {
        label: "Bitcoin",
        coin: 0,
    },
    cosmos: {
        label: "Cosmos",
        coin: 118,
    },
    near: {
        label: "Near",
        coin: 397,
    },
    linea: {
        label: "Linea",
        coin: 59144,
    },
    scroll: {
        label: "Scroll",
        coin: 534352,
    },
    sui: {
        label: "Sui",
        coin: 784,
    },
    unichain: {
        label: "Unichain",
        coin: 130,
    },
    berachain: {
        label: "Berachain",
        coin: 80094,
    },
    world_chain: {
        label: "WorldChain",
        coin: 480,
    },
    zora: {
        label: "Zora",
        coin: 7777777,
    },
    celo: {
        label: "Celo",
        coin: 42220,
    },
    aptos: {
        label: "Aptos",
        coin: 22,
    },
    algorand: {
        label: "Algorand",
        coin: 8,
    },
};
/**
 * Get the SLIP-0044 coin type for a given blockchain network.
 * This coin type is used internally for ENS address records.
 *
 * @param chain - The blockchain network to get the coin type for
 * @returns The SLIP-0044 coin type number
 *
 * @example
 * ```typescript
 * import { getCoinType, ChainName } from '@thenamespace/offchain-manager';
 *
 * const ethCoinType = getCoinType(ChainName.Ethereum); // Returns 60
 * const baseCoinType = getCoinType(ChainName.Base); // Returns 8453
 * ```
 */
const getCoinType = (chain) => {
    return exports.chainMetadata[chain].coin;
};
exports.getCoinType = getCoinType;
