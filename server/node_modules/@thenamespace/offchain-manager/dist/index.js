"use strict";
/**
 * @fileoverview Namespace SDK - Offchain Manager
 *
 * A TypeScript SDK for managing ENS subnames off-chain using the Namespace API.
 * This library provides a simple interface for creating, updating, deleting, and querying
 * ENS subnames and their associated records (addresses, text records, metadata).
 *
 * Supports all ENS-compatible domains including:
 * - Native ENS domains (.eth)
 * - Imported web2 domains (.com, .org, .net, etc.)
 * - Alternative TLDs (.art, .xyz, .club, etc.)
 *
 * @example
 * ```typescript
 * import { createOffchainClient, ChainName } from '@thenamespace/offchain-manager';
 *
 * // Initialize client with API key inline
 * const client = createOffchainClient({
 *   mode: 'sepolia',
 *   defaultApiKey: 'your-address-based-api-key'
 * });
 *
 * // Create a subname
 * await client.createSubname({
 *   parentName: 'example.eth',
 *   label: 'alice',
 *   addresses: [{ chain: ChainName.Ethereum, value: '0x...' }],
 *   texts: [{ key: 'com.twitter', value: 'alice' }]
 * });
 * ```
 *
 * @author Namespace Team
 * @version 3.0.6
 * @license MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RateLimitError = exports.SubnameAlreadyExistsError = exports.SubnameNotFoundError = exports.ValidationError = exports.AuthenticationError = exports.NamespaceSDKError = exports.validateApiKey = exports.validateAddress = exports.validateSubname = exports.validateEnsName = exports.getCoinType = exports.ChainName = exports.createOffchainClient = void 0;
// Core client exports
var offchain_client_1 = require("./offchain-client");
Object.defineProperty(exports, "createOffchainClient", { enumerable: true, get: function () { return offchain_client_1.createOffchainClient; } });
// Data transfer objects
var dto_1 = require("./dto");
Object.defineProperty(exports, "ChainName", { enumerable: true, get: function () { return dto_1.ChainName; } });
Object.defineProperty(exports, "getCoinType", { enumerable: true, get: function () { return dto_1.getCoinType; } });
// Validation utilities (for advanced usage)
var validation_1 = require("./offchain-client/validation");
Object.defineProperty(exports, "validateEnsName", { enumerable: true, get: function () { return validation_1.validateEnsName; } });
Object.defineProperty(exports, "validateSubname", { enumerable: true, get: function () { return validation_1.validateSubname; } });
Object.defineProperty(exports, "validateAddress", { enumerable: true, get: function () { return validation_1.validateAddress; } });
Object.defineProperty(exports, "validateApiKey", { enumerable: true, get: function () { return validation_1.validateApiKey; } });
// Error classes (for error handling)
var errors_1 = require("./offchain-client/errors");
Object.defineProperty(exports, "NamespaceSDKError", { enumerable: true, get: function () { return errors_1.NamespaceSDKError; } });
Object.defineProperty(exports, "AuthenticationError", { enumerable: true, get: function () { return errors_1.AuthenticationError; } });
Object.defineProperty(exports, "ValidationError", { enumerable: true, get: function () { return errors_1.ValidationError; } });
Object.defineProperty(exports, "SubnameNotFoundError", { enumerable: true, get: function () { return errors_1.SubnameNotFoundError; } });
Object.defineProperty(exports, "SubnameAlreadyExistsError", { enumerable: true, get: function () { return errors_1.SubnameAlreadyExistsError; } });
Object.defineProperty(exports, "RateLimitError", { enumerable: true, get: function () { return errors_1.RateLimitError; } });
