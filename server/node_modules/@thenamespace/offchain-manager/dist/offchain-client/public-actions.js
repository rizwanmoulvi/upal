"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports._getFilteredSubnames = exports._getSingleSubname = exports._getDataRecord = exports._getDataRecords = exports._getTextRecord = exports._getTextRecords = exports._isSubnameAvailable = void 0;
const axios_1 = require("axios");
const _isSubnameAvailable = async (client, fullSubname) => {
    try {
        const { data } = await client.get(`/api/v1/subnames/${fullSubname}`);
        return { isAvailable: !data };
    }
    catch (err) {
        if (err instanceof axios_1.AxiosError) {
            const axiosErr = err;
            if (axiosErr.response?.status === 404) {
                return { isAvailable: true };
            }
        }
        throw err;
    }
};
exports._isSubnameAvailable = _isSubnameAvailable;
const _getTextRecords = async (client, fullSubname) => {
    const subname = await client
        .get(`/api/v1/subnames/${fullSubname}`)
        .then((res) => res.data);
    return subname.texts;
};
exports._getTextRecords = _getTextRecords;
const _getTextRecord = async (client, fullSubname, key) => {
    const subname = await client
        .get(`/api/v1/subnames/${fullSubname}`)
        .then((res) => res.data);
    return { record: subname.texts[key] };
};
exports._getTextRecord = _getTextRecord;
const _getDataRecords = async (client, fullSubname) => {
    const subname = await client
        .get(`/api/v1/subnames/${fullSubname}`)
        .then((res) => res.data);
    return subname.metadata;
};
exports._getDataRecords = _getDataRecords;
const _getDataRecord = async (client, fullSubname, key) => {
    const subname = await client
        .get(`/api/v1/subnames/${fullSubname}`)
        .then((res) => res.data);
    return { record: subname.metadata[key] };
};
exports._getDataRecord = _getDataRecord;
const _getSingleSubname = (client, fullSubname) => {
    return client
        .get(`/api/v1/subnames/${fullSubname}`)
        .then((res) => res.data);
};
exports._getSingleSubname = _getSingleSubname;
const _getFilteredSubnames = async (client, query) => {
    const searchQuery = {};
    if (query.parentName) {
        searchQuery.domain = query.parentName;
    }
    if (query.page) {
        searchQuery.currentPage = query.page;
    }
    if (query.size) {
        searchQuery.pageSize = query.size;
    }
    if (query.parentNames && query.parentNames.length > 0) {
        searchQuery.parentNames = query.parentNames;
    }
    if (query.labelSearch) {
        searchQuery.labelSearch = query.labelSearch;
    }
    if (query.metadata) {
        searchQuery.metadata = JSON.stringify(query.metadata);
    }
    return client
        .post(`/api/v1/subnames/search`, query)
        .then((res) => res.data);
};
exports._getFilteredSubnames = _getFilteredSubnames;
