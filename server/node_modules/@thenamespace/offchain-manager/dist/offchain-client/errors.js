"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RateLimitError = exports.SubnameAlreadyExistsError = exports.SubnameNotFoundError = exports.ValidationError = exports.AuthenticationError = exports.NamespaceSDKError = void 0;
class NamespaceSDKError extends Error {
    constructor(message, code) {
        super(message);
        this.code = code;
        this.name = 'NamespaceSDKError';
    }
}
exports.NamespaceSDKError = NamespaceSDKError;
class AuthenticationError extends NamespaceSDKError {
    constructor(message = 'Authentication failed. Please check your API key.') {
        super(message, 'AUTH_ERROR');
        this.name = 'AuthenticationError';
    }
}
exports.AuthenticationError = AuthenticationError;
class ValidationError extends NamespaceSDKError {
    constructor(message) {
        super(message, 'VALIDATION_ERROR');
        this.name = 'ValidationError';
    }
}
exports.ValidationError = ValidationError;
class SubnameNotFoundError extends NamespaceSDKError {
    constructor(subname) {
        super(`Subname not found: ${subname}`, 'SUBDOMAIN_NOT_FOUND');
        this.name = 'SubnameNotFoundError';
    }
}
exports.SubnameNotFoundError = SubnameNotFoundError;
class SubnameAlreadyExistsError extends NamespaceSDKError {
    constructor(subname) {
        super(`Subname already exists: ${subname}`, 'SUBDOMAIN_EXISTS');
        this.name = 'SubnameAlreadyExistsError';
    }
}
exports.SubnameAlreadyExistsError = SubnameAlreadyExistsError;
class RateLimitError extends NamespaceSDKError {
    constructor(message = 'Rate limit exceeded. Please try again later.') {
        super(message, 'RATE_LIMIT');
        this.name = 'RateLimitError';
    }
}
exports.RateLimitError = RateLimitError;
