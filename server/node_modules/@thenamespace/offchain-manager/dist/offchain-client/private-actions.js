"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports._deleteDataRecord = exports._addDataRecord = exports._deleteTextRecord = exports._addTextRecord = exports._deleteSubname = exports._deleteAddressRecord = exports._addAddressRecord = exports._updateSubname = exports._createSubname = void 0;
const utils_1 = require("./utils");
const public_actions_1 = require("./public-actions");
const AUTH_HEADER = "x-auth-token";
const _createSubname = (client, apiKey, createRequest) => {
    const request = {
        label: createRequest.label,
        parentName: createRequest.parentName,
        addresses: (0, utils_1.mapAddressesToInternal)(createRequest.addresses || []),
        contenthash: createRequest.contenthash,
        metadata: createRequest.metadata,
        texts: createRequest.texts,
        ttl: createRequest.ttl,
        owner: createRequest.owner
    };
    return client.post("/api/v1/subnames", request, {
        headers: createAuthorizationHeaders(apiKey),
    });
};
exports._createSubname = _createSubname;
const _updateSubname = async (client, apiKey, fullSubname, updateRequest) => {
    const subname = await (0, public_actions_1._getSingleSubname)(client, fullSubname);
    const request = {
        label: subname.label,
        parentName: subname.parentName,
        addresses: (0, utils_1.mapAddressesToInternal)(updateRequest.addresses || []),
        contenthash: updateRequest.contenthash,
        metadata: updateRequest.metadata,
        texts: updateRequest.texts,
        ttl: updateRequest.ttl,
    };
    return client.post("/api/v1/subnames", request, {
        headers: createAuthorizationHeaders(apiKey),
    }).then(res => res.data);
};
exports._updateSubname = _updateSubname;
const _addAddressRecord = async (client, apiKey, fullSubname, coin, value) => {
    const subname = await (0, public_actions_1._getSingleSubname)(client, fullSubname);
    const addresses = subname.addresses || {};
    addresses[coin] = value;
    const _req = (0, utils_1.subnameResponseToRequest)(subname);
    const request = {
        ..._req,
        addresses: (0, utils_1.mapAddrMapToAddressRecords)(addresses),
    };
    return client.post(`/api/v1/subnames`, request, {
        headers: createAuthorizationHeaders(apiKey),
    });
};
exports._addAddressRecord = _addAddressRecord;
const _deleteAddressRecord = async (client, apiKey, fullSubname, coin) => {
    const subname = await (0, public_actions_1._getSingleSubname)(client, fullSubname);
    const addresses = subname.addresses || {};
    delete addresses[coin];
    const _req = (0, utils_1.subnameResponseToRequest)(subname);
    const request = {
        ..._req,
        addresses: (0, utils_1.mapAddrMapToAddressRecords)(addresses),
    };
    return client.post(`/api/v1/subnames`, request, {
        headers: createAuthorizationHeaders(apiKey),
    });
};
exports._deleteAddressRecord = _deleteAddressRecord;
const _deleteSubname = (client, apiKey, fullSubname) => {
    return client.delete(`/api/v1/subnames/${fullSubname}`, {
        headers: createAuthorizationHeaders(apiKey),
    });
};
exports._deleteSubname = _deleteSubname;
const _addTextRecord = async (client, apiKey, fullSubname, key, value) => {
    const subname = await (0, public_actions_1._getSingleSubname)(client, fullSubname);
    const _req = (0, utils_1.subnameResponseToRequest)(subname);
    const texts = subname.texts || {};
    texts[key] = value;
    const request = {
        ..._req,
        texts: (0, utils_1.mapTextMapToTextRecords)(texts),
    };
    return client.post(`/api/v1/subnames`, request, {
        headers: createAuthorizationHeaders(apiKey),
    });
};
exports._addTextRecord = _addTextRecord;
const _deleteTextRecord = async (client, apiKey, fullSubname, key) => {
    const subname = await (0, public_actions_1._getSingleSubname)(client, fullSubname);
    const texts = subname.texts || {};
    delete texts[key];
    const _req = (0, utils_1.subnameResponseToRequest)(subname);
    const request = {
        ..._req,
        texts: (0, utils_1.mapTextMapToTextRecords)(texts),
    };
    return client.post(`/api/v1/subnames`, request, {
        headers: createAuthorizationHeaders(apiKey),
    });
};
exports._deleteTextRecord = _deleteTextRecord;
const _addDataRecord = async (client, apiKey, fullSubname, key, value) => {
    const subname = await (0, public_actions_1._getSingleSubname)(client, fullSubname);
    const metadata = subname.metadata || {};
    metadata[key] = value;
    const _req = (0, utils_1.subnameResponseToRequest)(subname);
    const request = {
        ..._req,
        metadata: (0, utils_1.mapTextMapToTextRecords)(metadata),
    };
    return client.post(`/api/v1/subnames`, request, {
        headers: createAuthorizationHeaders(apiKey),
    });
};
exports._addDataRecord = _addDataRecord;
const _deleteDataRecord = async (client, apiKey, fullSubname, key) => {
    const subname = await client
        .get(`/api/v1/subnames/${fullSubname}`)
        .then((res) => res.data);
    const updatedData = Object.entries(subname.metadata)
        .filter(([dataKey]) => dataKey !== key)
        .map(([dataKey, dataValue]) => ({ key: dataKey, value: dataValue }));
    const _req = (0, utils_1.subnameResponseToRequest)(subname);
    const request = {
        ..._req,
        metadata: updatedData,
    };
    return client.post(`/api/v1/subnames`, request, {
        headers: createAuthorizationHeaders(apiKey),
    });
};
exports._deleteDataRecord = _deleteDataRecord;
const createAuthorizationHeaders = (apiKey) => {
    return {
        [AUTH_HEADER]: `${apiKey}`,
    };
};
