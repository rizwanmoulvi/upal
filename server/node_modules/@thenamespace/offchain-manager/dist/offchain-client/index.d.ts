import { AxiosRequestConfig } from "axios";
import { SubnameDTO } from "../dto/subname.dto";
import { GetAvailableResponse, GetRecordResponse, PagedResponse, QuerySubnamesRequest } from "./types";
import { CreateSubnameRequest } from "../dto/create-subname-request.dto";
import { ChainName, UpdateSubnameRequest } from "../dto";
/**
 * Main client interface for managing ENS subnames off-chain.
 * Provides methods for creating, updating, deleting, and querying subnames and their records.
 *
 * @example
 * ```typescript
 * import { createOffchainClient } from '@thenamespace/offchain-manager';
 *
 * const client = createOffchainClient();
 * client.setDefaultApiKey('your-api-key'); // Works with your address based ENS domain
 *
 * // Create a subname
 * await client.createSubname({
 *   parentName: 'example.eth',
 *   label: 'alice',
 *   addresses: [{ chain: ChainName.Ethereum, value: '0x...' }]
 * });
 * ```
 */
export interface OffchainClient {
    /**
     * Set API key for a specific ENS domain.
     * @param ensName - The ENS domain name (e.g., 'example.eth')
     * @param apiKey - Domain Based API key obtained from https://dev.namespace.ninja
     * @example
     * ```typescript
     * client.setApiKey('example.eth', 'your-domain-based-api-key');
     * ```
     */
    setApiKey(ensName: string, apiKey: string): void;
    /**
     * Set a default API key to be used for all your ENS domains with Namespace Resolver.
     * This is useful when you want to use the same API key for all domains registered with the same address.
     * @param apiKey - Address Based API key obtained from https://dev.namespace.ninja
     * @example
     * ```typescript
     * client.setDefaultApiKey('your-address-based-api-key');
     * ```
     */
    setDefaultApiKey(apiKey: string): void;
    /**
     * Create a new ENS subname with optional records.
     * @param request - Subname creation parameters
     * @throws {ValidationError} When request parameters are invalid
     * @throws {AuthenticationError} When API key is invalid
     * @throws {SubnameAlreadyExistsError} When subname already exists
     * @example
     * ```typescript
     * await client.createSubname({
     *   parentName: 'example.eth',
     *   label: 'alice',
     *   owner: "0x123...",
     *   addresses: [{ chain: ChainName.Ethereum, value: '0x123...' }],
     *   texts: [{ key: 'com.twitter', value: 'alice' }],
     *   contenthash: "ipfs://baf....",
     *   metadata: [{ key: "sender", value: '0x123...' }],
     * });
     */
    createSubname(request: CreateSubnameRequest): Promise<void>;
    /**
     * Update an existing ENS subname's records.
     * @param subname - Full subname (e.g., 'alice.example.eth')
     * @param request - Update parameters
     * @throws {ValidationError} When parameters are invalid
     * @throws {SubnameNotFoundError} When subname doesn't exist
     * @example
     * ```typescript
     * await client.updateSubname('alice.example.eth', {
     *   addresses: [{ chain: ChainName.Ethereum, value: '0x...' }],
     *   texts: [{ key: 'com.twitter', value: 'alice' }]
     * });
     * ```
     */
    updateSubname(subname: string, request: UpdateSubnameRequest): Promise<void>;
    /**
     * Delete an ENS subname and all its records.
     * @param fullSubname - Full subname (e.g., 'alice.example.eth')
     * @throws {SubnameNotFoundError} When subname doesn't exist
     * @example
     * ```typescript
     * await client.deleteSubname('alice.example.eth');
     * ```
     */
    deleteSubname(fullSubname: string): Promise<void>;
    /**
     * Check if a subname is available for registration.
     * @param fullSubname - Full subname to check (e.g., 'alice.example.eth')
     * @returns Promise resolving to availability status
     * @example
     * ```typescript
     * const availability = await client.isSubnameAvailable('alice.example.eth');
     * ```
     */
    isSubnameAvailable(fullSubname: string): Promise<GetAvailableResponse>;
    /**
     * Get details of a specific subname.
     * @param fullName - Full subname (e.g., 'alice.example.eth')
     * @returns Promise resolving to subname data or null if not found
     * @example
     * ```typescript
     * const subname = await client.getSingleSubname('alice.example.eth');
     * ```
     */
    getSingleSubname(fullName: string): Promise<SubnameDTO | null>;
    /**
     * Search and filter subnames with pagination.
     * @param query - Search and filter parameters
     * @returns Promise resolving to paginated subname results
     * @example
     * ```typescript
     * const subnames = await client.getFilteredSubnames({
     *   parentName: 'example.eth',
     *   page: 1,
     *   size: 50,
     * });
     * ```
     */
    getFilteredSubnames(query: QuerySubnamesRequest): Promise<PagedResponse<SubnameDTO[]>>;
    /**
     * Add an address record for a specific blockchain to a subname.
     * @param subname - Full subname (e.g., 'alice.example.eth')
     * @param chain - Blockchain network
     * @param value - Wallet address on the specified chain
     * @throws {ValidationError} When address format is invalid for the chain
     * @example
     * ```typescript
     * await client.addAddressRecord('alice.example.eth', ChainName.Ethereum, '0x...');
     * ```
     */
    addAddressRecord(subname: string, chain: ChainName, value: string): Promise<void>;
    /**
     * Remove an address record for a specific blockchain from a subname.
     * @param subname - Full subname (e.g., 'alice.example.eth')
     * @param chain - Blockchain network to remove
     * @example
     * ```typescript
     * await client.deleteAddressRecord('alice.example.eth', ChainName.Ethereum);
     * ```
     */
    deleteAddressRecord(subname: string, chain: ChainName): Promise<void>;
    /**
     * Add a text record to a subname.
     * @param subname - Full subname (e.g., 'alice.example.eth')
     * @param key - Record key (e.g., 'com.twitter', 'com.github', 'url')
     * @param value - Record value (e.g., 'alice', 'https://alice.dev')
     * @example
     * ```typescript
     * await client.addTextRecord('alice.example.eth', 'com.twitter', 'alice');
     * ```
     */
    addTextRecord(subname: string, key: string, value: string): Promise<void>;
    /**
     * Remove a text record from a subname.
     * @param subname - Full subname (e.g., 'alice.example.eth')
     * @param key - Record key to remove
     * @example
     * ```typescript
     * await client.deleteTextRecord('alice.example.eth', 'com.twitter');
     * ```
     */
    deleteTextRecord(subname: string, key: string): Promise<void>;
    /**
     * Get all text records for a subname.
     * @param fullSubname - Full subname (e.g., 'alice.example.eth')
     * @returns Promise resolving to all the text records for the subname
     * @example
     * ```typescript
     * const textRecords = await client.getTextRecords('alice.example.eth');
     * ```
     */
    getTextRecords(fullSubname: string): Promise<Record<string, string>>;
    /**
     * Get a specific text record for a subname.
     * @param fullSubname - Full subname (e.g., 'alice.example.eth')
     * @param key - Record key to retrieve
     * @returns Promise resolving to the record response
     * @example
     * ```typescript
     * const textRecord = await client.getTextRecord('alice.example.eth', 'com.twitter');
     * ```
     */
    getTextRecord(fullSubname: string, key: string): Promise<GetRecordResponse>;
    /**
     * Add a metadata record to a subname.
     * @param fullSubname - Full subname (e.g., 'alice.example.eth')
     * @param key - Metadata key
     * @param data - Metadata value (will be JSON stringified if object)
     * @example
     * ```typescript
     * await client.addDataRecord('alice.example.eth', 'data', 'HODL ENS!');
     * ```
     */
    addDataRecord(fullSubname: string, key: string, data: unknown): Promise<void>;
    /**
     * Remove a metadata record from a subname.
     * @param subname - Full subname (e.g., 'alice.example.eth')
     * @param key - Metadata key to remove
     * @example
     * ```typescript
     * await client.deleteDataRecord('alice.example.eth', 'data');
     * ```
     */
    deleteDataRecord(subname: string, key: string): Promise<void>;
    /**
     * Get all metadata records for a subname.
     * @param fullSubname - Full subname (e.g., 'alice.example.eth')
     * @returns Promise resolving to key-value pairs of metadata records
     * @example
     * ```typescript
     * const dataRecords = await client.getDataRecords('alice.example.eth');
     * ```
     */
    getDataRecords(fullSubname: string): Promise<Record<string, unknown>>;
    /**
     * Get a specific metadata record for a subname.
     * @param fullSubname - Full subname (e.g., 'alice.example.eth')
     * @param key - Metadata key to retrieve
     * @returns Promise resolving to the record response
     * @example
     * ```typescript
     * const dataRecord = await client.getDataRecord('alice.example.eth', 'data');
     * ```
     */
    getDataRecord(fullSubname: string, key: string): Promise<GetRecordResponse>;
}
/** Network modes supported by the Namespace SDK */
type Mode = "mainnet" | "sepolia";
/**
 * Configuration options for creating an OffchainClient.
 * Extends AxiosRequestConfig to allow customization of HTTP client behavior.
 *
 * @example
 * ```typescript
 * const config: OffchainClientConfig = {
 *   mode: 'sepolia', // Use testnet
 *   timeout: 5000,  // 5 second timeout
 *   defaultApiKey: 'your-address-based-api-key', // Optional: works with all your ENS domains
 *   domainApiKeys: { // Optional: domain-specific API keys
 *     'example.eth': 'your-domain-based-api-key'
 *   }
 * };
 * ```
 */
export interface OffchainClientConfig extends AxiosRequestConfig {
    /**
     * Network mode - 'mainnet' for production, 'sepolia' for testing.
     * @default 'mainnet'
     */
    mode?: Mode;
    /**
     * Custom backend URI. If not provided, uses the default URI for the selected mode.
     */
    backendUri?: string;
    /**
     * Address-based API key to use by default for all domains registered to your address.
     * Equivalent to calling client.setDefaultApiKey() after initialization.
     */
    defaultApiKey?: string;
    /**
     * Domain-based API keys keyed by ENS parent name (e.g., "example.eth").
     * Equivalent to calling client.setApiKey(name, key) for each entry after initialization.
     */
    domainApiKeys?: Record<string, string>;
}
/**
 * Create a new OffchainClient instance for managing ENS subnames.
 *
 * @param config - Optional configuration options including network mode, HTTP settings, and API keys
 * @returns A configured OffchainClient instance
 *
 * @example
 * ```typescript
 * import { createOffchainClient } from '@thenamespace/offchain-manager';
 *
 * // 1. No-arg initialization (defaults to mainnet)
 * const client = createOffchainClient();
 *
 * // 2. Configure network mode
 * const client = createOffchainClient({ mode: 'sepolia' });
 *
 * // 3. Initialize with address-based API key (works with all your ENS domains)
 * const client = createOffchainClient({
 *   mode: 'sepolia',
 *   defaultApiKey: 'your-address-based-api-key'
 * });
 *
 * // 4. Initialize with domain-based API keys (for specific ENS domains)
 * const client = createOffchainClient({
 *   mode: 'sepolia',
 *   domainApiKeys: {
 *     'example.eth': 'your-domain-based-api-key',
 *     'test.eth': 'another-domain-key'
 *   }
 * });
 *
 * // 5. Initialize with both default and domain API keys
 * const client = createOffchainClient({
 *   mode: 'sepolia',
 *   defaultApiKey: 'your-address-based-api-key',
 *   domainApiKeys: {
 *     'example.eth': 'your-domain-based-api-key'
 *   }
 * });
 *
 * // You can also set/update keys after initialization
 * client.setDefaultApiKey('your-api-key');
 * client.setApiKey('example.eth', 'your-domain-key');
 * ```
 */
export declare const createOffchainClient: (config?: OffchainClientConfig) => OffchainClient;
export {};
