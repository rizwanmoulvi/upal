import { ChainName } from '../dto';
/**
 * Validates that a string is a properly formatted ENS domain name.
 * ENS supports many TLDs including .eth, .com, .art, .xyz, and others through ENS import.
 *
 * Validation follows ENS normalization rules:
 * - Names must be lowercase
 * - Variation selectors (U+FE00-U+FE0F) are not allowed
 * - Zero-width characters are not allowed (prevents homoglyph attacks)
 * - Supports emojis, accented characters, and many Unicode characters
 *
 * @param name - The ENS name to validate (e.g., 'example.eth', 'mysite.com', 'art.gallery.art')
 * @throws {ValidationError} When the name format is invalid
 *
 * @example
 * ```typescript
 * import { validateEnsName } from '@thenamespace/offchain-manager';
 *
 * validateEnsName('example.eth'); // ✅ Valid
 * validateEnsName('mysite.com'); // ✅ Valid (ENS supports imported domains)
 * validateEnsName('gallery.art'); // ✅ Valid
 * validateEnsName('sub.example.eth'); // ✅ Valid
 * validateEnsName('🚀.eth'); // ✅ Valid (emojis supported)
 * validateEnsName('café.eth'); // ✅ Valid (accented characters supported)
 * validateEnsName('Example.eth'); // ❌ Throws ValidationError (uppercase not allowed)
 * validateEnsName('invalid..domain'); // ❌ Throws ValidationError
 * ```
 */
export declare const validateEnsName: (name: string) => void;
/**
 * Validates that a string is a properly formatted ENS subname.
 * A subname must have at least one label before the parent domain.
 * Supports all ENS-compatible TLDs (.eth, .com, .art, .xyz, etc.).
 *
 * @param subname - The subname to validate (e.g., 'alice.example.eth', 'app.mysite.com')
 * @throws {ValidationError} When the subname format is invalid
 *
 * @example
 * ```typescript
 * import { validateSubname } from '@thenamespace/offchain-manager';
 *
 * validateSubname('alice.example.eth'); // ✅ Valid
 * validateSubname('app.mysite.com'); // ✅ Valid
 * validateSubname('user.gallery.art'); // ✅ Valid
 * validateSubname('app.subdomain.example.eth'); // ✅ Valid
 * validateSubname('example.eth'); // ❌ Throws ValidationError (not a subname, just 2 parts)
 * validateSubname('.example.eth'); // ❌ Throws ValidationError (empty label)
 * ```
 */
export declare const validateSubname: (subname: string) => void;
/**
 * Validates that an address is properly formatted for the specified blockchain network.
 * Each blockchain has its own address format and validation rules.
 *
 * @param address - The wallet address to validate
 * @param chain - The blockchain network this address belongs to
 * @throws {ValidationError} When the address format is invalid for the specified chain
 *
 * @example
 * ```typescript
 * import { validateAddress, ChainName } from '@thenamespace/offchain-manager';
 *
 * // Ethereum-style addresses (40 hex characters)
 * validateAddress('0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045', ChainName.Ethereum); // ✅
 * validateAddress('0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045', ChainName.Base); // ✅
 *
 * // Solana addresses (base58 encoded)
 * validateAddress('9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM', ChainName.Solana); // ✅
 *
 * // NEAR addresses (.near suffix)
 * validateAddress('alice.near', ChainName.Near); // ✅
 *
 * // Invalid examples
 * validateAddress('invalid', ChainName.Ethereum); // ❌ Throws ValidationError
 * validateAddress('0x123', ChainName.Ethereum); // ❌ Throws ValidationError (too short)
 * ```
 */
export declare const validateAddress: (address: string, chain: ChainName) => void;
/**
 * Validates that an API key appears to be in the correct format.
 * This performs basic sanity checks but doesn't verify the key with the server.
 *
 * @param apiKey - The API key to validate
 * @throws {ValidationError} When the API key format appears invalid
 *
 * @example
 * ```typescript
 * import { validateApiKey } from '@thenamespace/offchain-manager';
 *
 * validateApiKey('ns-123fcc-1126-1234-1234-c63047985fe2'); // ✅ Valid format
 * validateApiKey('short'); // ❌ Throws ValidationError (too short)
 * validateApiKey(''); // ❌ Throws ValidationError (empty)
 * ```
 */
export declare const validateApiKey: (apiKey: string) => void;
