"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.subnameResponseToRequest = exports.mapAddrMapToAddressRecords = exports.mapTextMapToTextRecords = exports.mapAddressesToInternal = void 0;
const dto_1 = require("../dto");
const mapAddressesToInternal = (addrs) => {
    const _addr = addrs.map((addr) => {
        const _internalAddr = {
            coin: (0, dto_1.getCoinType)(addr.chain),
            value: addr.value,
        };
        return _internalAddr;
    });
    return _addr;
};
exports.mapAddressesToInternal = mapAddressesToInternal;
const mapTextMapToTextRecords = (txtMap) => {
    return Object.keys(txtMap).map((txtKey) => {
        return {
            key: txtKey,
            value: txtMap[txtKey],
        };
    });
};
exports.mapTextMapToTextRecords = mapTextMapToTextRecords;
const mapAddrMapToAddressRecords = (addrMap) => {
    return Object.keys(addrMap).map((addrKey) => {
        return {
            coin: parseInt(addrKey),
            value: addrMap[addrKey],
        };
    });
};
exports.mapAddrMapToAddressRecords = mapAddrMapToAddressRecords;
const subnameResponseToRequest = (response) => {
    const addrs = [];
    const texts = [];
    if (response.addresses) {
        Object.keys(response.addresses).forEach((addrCoin) => {
            try {
                const coin = parseInt(addrCoin);
                const value = response.addresses[addrCoin];
                addrs.push({ coin: coin, value: value });
            }
            catch (err) { }
        });
    }
    if (response.texts) {
        Object.keys(response.texts).forEach((txt) => {
            texts.push({
                key: txt,
                value: response.texts[txt],
            });
        });
    }
    return {
        label: response.label,
        parentName: response.parentName,
        addresses: addrs,
        texts: texts,
        contenthash: response.contenthash,
        metadata: Object.keys(response.metadata || {}).map((data) => {
            return {
                key: data,
                value: response.metadata[data],
            };
        }),
        ttl: response.ttl,
    };
};
exports.subnameResponseToRequest = subnameResponseToRequest;
